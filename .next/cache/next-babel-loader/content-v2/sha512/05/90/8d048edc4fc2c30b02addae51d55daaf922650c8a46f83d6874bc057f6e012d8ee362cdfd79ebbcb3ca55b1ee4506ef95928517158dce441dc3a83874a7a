{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/index.js\";\n// lets us add head elements to head of the page\nimport Head from \"next/head\"; // when you import a package and only use it in getServerProps or getStaticProps, the\n// imported package is only availbale in server side. Next JS feature\n\nimport { MongoClient } from \"mongodb\"; // these components aren't rendered as pages\n\nimport MeetupList from \"../components/meetups/MeetupList\"; // const DUMMY_MEETUPS = [\n// \t{\n// \t\tid: \"m1\",\n// \t\ttitle: \"A First Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a first meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m2\",\n// \t\ttitle: \"A Second Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Second meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m3\",\n// \t\ttitle: \"A Third Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Third meetup!\",\n// \t},\n// ];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n} // render the component for each request.\n// this only runs on the server after deployment.\n// only use if your data updates every second or it'll slow down your website.\n// export async function getServerSideProps(context) {\n// \t// can get access to request and response object\n// \tconst req = context.req;\n// \tconst res = context.res;\n// \t// fetch data from API\n// \t// can run operations that contain credentials that shouldn't be exposed\n// \treturn {\n// \t\tprops: {\n// \t\t\tmeetups: DUMMY_MEETUPS,\n// \t\t},\n// \t};\n// }\n// only works in page component files\n// executes function during prerendering process - runs this before calling component function\n// it can return promises which causes next to wait for data before rendering component\n// you can access code that can execute on a server, this code never executes on the client-side\n\n\nexport async function getStaticProps() {\n  // always returns an object\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // fidns all documents in collection asynchronously.\n  // toArray - ensure we get an array of documents\n\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    // set as props for page component (HomePage(props) {...})\n    props: {\n      // transform dataa to match props\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        // converts object to string which is usable\n        id: meetup._id.toString()\n      }))\n    },\n    // adds incremental static generation.\n    // number of seconds next waits before regenerating the results.\n    // server regenerates this every 10 seconds if requests are coming for this page.\n    // you now don't have to redeploy and rebuild for each time data changes.\n    revalidate: 10\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/index.js"],"names":["Head","MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB,C,CAEA;AACA;;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,kCAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACxB,sBACC;AAAA,4BACC,QAAC,IAAD;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAIC,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA,kBADD;AAQA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACtC;AAEA;AACA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACpB,8FADoB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAVsC,CAYtC;AACA;;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACN;AACAV,IAAAA,KAAK,EAAE;AACN;AACAC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AACjCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADmB;AAEjCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFiB;AAGjCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHmB;AAIjC;AACAC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAL6B,OAAb,CAAZ;AAFH,KAFD;AAYN;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AAhBN,GAAP;AAkBA;AAED,eAAepB,QAAf","sourcesContent":["// lets us add head elements to head of the page\nimport Head from \"next/head\";\n\n// when you import a package and only use it in getServerProps or getStaticProps, the\n// imported package is only availbale in server side. Next JS feature\nimport { MongoClient } from \"mongodb\";\n\n// these components aren't rendered as pages\nimport MeetupList from \"../components/meetups/MeetupList\";\n\n// const DUMMY_MEETUPS = [\n// \t{\n// \t\tid: \"m1\",\n// \t\ttitle: \"A First Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a first meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m2\",\n// \t\ttitle: \"A Second Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Second meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m3\",\n// \t\ttitle: \"A Third Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Third meetup!\",\n// \t},\n// ];\n\nfunction HomePage(props) {\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<title>React Meetups</title>\n\t\t\t</Head>\n\t\t\t<MeetupList meetups={props.meetups} />\n\t\t</>\n\t);\n}\n\n// render the component for each request.\n// this only runs on the server after deployment.\n// only use if your data updates every second or it'll slow down your website.\n// export async function getServerSideProps(context) {\n// \t// can get access to request and response object\n// \tconst req = context.req;\n// \tconst res = context.res;\n\n// \t// fetch data from API\n// \t// can run operations that contain credentials that shouldn't be exposed\n\n// \treturn {\n// \t\tprops: {\n// \t\t\tmeetups: DUMMY_MEETUPS,\n// \t\t},\n// \t};\n// }\n\n// only works in page component files\n// executes function during prerendering process - runs this before calling component function\n// it can return promises which causes next to wait for data before rendering component\n// you can access code that can execute on a server, this code never executes on the client-side\n\nexport async function getStaticProps() {\n\t// always returns an object\n\n\t// we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\tconst client = await MongoClient.connect(\n\t\t\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\"\n\t);\n\n\tconst db = client.db();\n\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\t// fidns all documents in collection asynchronously.\n\t// toArray - ensure we get an array of documents\n\tconst meetups = await meetupsCollection.find().toArray();\n\n\tclient.close();\n\n\treturn {\n\t\t// set as props for page component (HomePage(props) {...})\n\t\tprops: {\n\t\t\t// transform dataa to match props\n\t\t\tmeetups: meetups.map((meetup) => ({\n\t\t\t\ttitle: meetup.title,\n\t\t\t\taddress: meetup.address,\n\t\t\t\timage: meetup.image,\n\t\t\t\t// converts object to string which is usable\n\t\t\t\tid: meetup._id.toString(),\n\t\t\t})),\n\t\t},\n\t\t// adds incremental static generation.\n\t\t// number of seconds next waits before regenerating the results.\n\t\t// server regenerates this every 10 seconds if requests are coming for this page.\n\t\t// you now don't have to redeploy and rebuild for each time data changes.\n\t\trevalidate: 10,\n\t};\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}