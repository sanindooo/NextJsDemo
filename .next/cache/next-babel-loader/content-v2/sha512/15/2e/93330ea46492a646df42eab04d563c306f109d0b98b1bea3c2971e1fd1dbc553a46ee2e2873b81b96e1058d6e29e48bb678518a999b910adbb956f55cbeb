{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.mmetupData.image,\n    title: props.mmetupData.title,\n    address: props.mmetupData.address,\n    description: props.mmetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n} // getStaticPaths - needs to be exported in page component if it's a dynamic page and we're using getStaticProps.\n// helps make sure we only pregenerate pages for id's that exist. Entering in a path that doesn't exist throws an error\n\n\nexport async function getStaticPaths() {\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // modify find() to only spit out iD's - first arg: filter criteria where empty means no filter criteria\n  // second arg: define which fields to extract for each document.\n  // assigning value of 1 means only fetch this items and not any of the others\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // fallback - lets next if your paths contains all supported params of just some of them.\n    // false - paths: contains all meetupId values.\n    // true - next tries to create a new path dynamically based on the request.\n    fallback: false,\n    // paths object defines what paths should be pregenerated using the page ID param\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} // cant use react hooks in this function\n\nexport async function getStaticProps(context) {\n  // context has params\n  // grab ID for items in the square bracket folder\n  const meetupId = context.params.meetupId; // only shows in terminal since it doesn't run on the browser\n  // console.log(meetupId);\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // we want to access a single meetup.\n  // object in find() set criteria by which we want to find meetup info by (using id in this case but can use any key)\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","mmetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADzB;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFzB;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH3B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ/B;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,C,CAED;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACtC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACpB,8FADoB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CARsC,CAUtC;AACA;AACA;;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACN;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,KAJJ;AAKN;AACAC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC/BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADuB,KAAb,CAAZ;AAND,GAAP;AAUA,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C;AACA;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAH6C,CAK7C;AACA;AAEA;;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACpB,8FADoB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAf6C,CAiB7C;AACA;;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNhB,IAAAA,KAAK,EAAE;AACN4B,MAAAA,UAAU,EAAEF;AADN;AADD,GAAP;AAKA;AAED,eAAe3B,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n\treturn (\n\t\t<MeetupDetail\n\t\t\timage={props.mmetupData.image}\n\t\t\ttitle={props.mmetupData.title}\n\t\t\taddress={props.mmetupData.address}\n\t\t\tdescription={props.mmetupData.description}\n\t\t/>\n\t);\n}\n\n// getStaticPaths - needs to be exported in page component if it's a dynamic page and we're using getStaticProps.\n// helps make sure we only pregenerate pages for id's that exist. Entering in a path that doesn't exist throws an error\nexport async function getStaticPaths() {\n\t// we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\tconst client = await MongoClient.connect(\n\t\t\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\"\n\t);\n\n\tconst db = client.db();\n\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\t// modify find() to only spit out iD's - first arg: filter criteria where empty means no filter criteria\n\t// second arg: define which fields to extract for each document.\n\t// assigning value of 1 means only fetch this items and not any of the others\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n\tclient.close();\n\n\treturn {\n\t\t// fallback - lets next if your paths contains all supported params of just some of them.\n\t\t// false - paths: contains all meetupId values.\n\t\t// true - next tries to create a new path dynamically based on the request.\n\t\tfallback: false,\n\t\t// paths object defines what paths should be pregenerated using the page ID param\n\t\tpaths: meetups.map((meetup) => ({\n\t\t\tparams: { meetupId: meetup._id.toString() },\n\t\t})),\n\t};\n}\n\n// cant use react hooks in this function\nexport async function getStaticProps(context) {\n\t// context has params\n\t// grab ID for items in the square bracket folder\n\tconst meetupId = context.params.meetupId;\n\n\t// only shows in terminal since it doesn't run on the browser\n\t// console.log(meetupId);\n\n\t// we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\tconst client = await MongoClient.connect(\n\t\t\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\"\n\t);\n\n\tconst db = client.db();\n\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\t// we want to access a single meetup.\n\t// object in find() set criteria by which we want to find meetup info by (using id in this case but can use any key)\n\tconst selectedMeetup = await meetupsCollection.findOne({ _id: meetupId });\n\n\tclient.close();\n\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: selectedMeetup,\n\t\t},\n\t};\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}