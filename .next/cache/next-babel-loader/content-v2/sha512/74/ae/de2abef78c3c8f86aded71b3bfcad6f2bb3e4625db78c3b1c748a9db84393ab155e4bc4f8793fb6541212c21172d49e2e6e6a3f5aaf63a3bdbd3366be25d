{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// lets us add head elements to head of the page\nimport Head from \"next/head\"; // when you import a package and only use it in getServerProps or getStaticProps, the\n// imported package is only availbale in server side. Next JS feature\n\nimport { MongoClient } from \"mongodb\"; // these components aren't rendered as pages\n\nimport MeetupList from \"../components/meetups/MeetupList\"; // const DUMMY_MEETUPS = [\n// \t{\n// \t\tid: \"m1\",\n// \t\ttitle: \"A First Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a first meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m2\",\n// \t\ttitle: \"A Second Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Second meetup!\",\n// \t},\n// \t{\n// \t\tid: \"m3\",\n// \t\ttitle: \"A Third Meetup\",\n// \t\timage:\n// \t\t\t\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/800px-Stadtbild_M%C3%BCnchen.jpg\",\n// \t\taddress: \"Some address 5, 12345 Some City\",\n// \t\tdescription: \"This is a Third meetup!\",\n// \t},\n// ];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly reactive React meetups!\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupList, {\n      meetups: props.meetups\n    })]\n  });\n} // render the component for each request.\n// this only runs on the server after deployment.\n// only use if your data updates every second or it'll slow down your website.\n// export async function getServerSideProps(context) {\n// \t// can get access to request and response object\n// \tconst req = context.req;\n// \tconst res = context.res;\n// \t// fetch data from API\n// \t// can run operations that contain credentials that shouldn't be exposed\n// \treturn {\n// \t\tprops: {\n// \t\t\tmeetups: DUMMY_MEETUPS,\n// \t\t},\n// \t};\n// }\n// only works in page component files\n// executes function during prerendering process - runs this before calling component function\n// it can return promises which causes next to wait for data before rendering component\n// you can access code that can execute on a server, this code never executes on the client-side\n\n\nexport async function getStaticProps() {\n  // always returns an object\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // fidns all documents in collection asynchronously.\n  // toArray - ensure we get an array of documents\n\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    // set as props for page component (HomePage(props) {...})\n    props: {\n      // transform dataa to match props\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        // converts object to string which is usable\n        id: meetup._id.toString()\n      }))\n    },\n    // adds incremental static generation.\n    // number of seconds next waits before regenerating the results.\n    // server regenerates this every 10 seconds if requests are coming for this page.\n    // you now don't have to redeploy and rebuild for each time data changes.\n    revalidate: 10\n  };\n}\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}