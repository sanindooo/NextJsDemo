{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n} // getStaticPaths - needs to be exported in page component if it's a dynamic page and we're using getStaticProps.\n// helps make sure we only pregenerate pages for id's that exist. Entering in a path that doesn't exist throws an error\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/sanindo/Desktop/Files/courses/react/code/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAGA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B,sBACC;AAAA,4BACC,QAAC,IAAD;AAAA,8BACC;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AACC,QAAA,IAAI,EAAC,aADN;AAEC,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAF3B;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAQC,QAAC,YAAD;AACC,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KADzB;AAEC,MAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAFzB;AAGC,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH3B;AAIC,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBE;AAJ/B;AAAA;AAAA;AAAA;AAAA,YARD;AAAA,kBADD;AAiBA,C,CAED;AACA;;;KArBSJ,a;;AA4FT,eAAeA,aAAf","sourcesContent":["import Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<title>{props.meetupData.title}</title>\n\t\t\t\t<meta\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tcontent={props.meetupData.description}\n\t\t\t\t/>\n\t\t\t</Head>\n\t\t\t<MeetupDetail\n\t\t\t\timage={props.meetupData.image}\n\t\t\t\ttitle={props.meetupData.title}\n\t\t\t\taddress={props.meetupData.address}\n\t\t\t\tdescription={props.meetupData.description}\n\t\t\t/>\n\t\t</>\n\t);\n}\n\n// getStaticPaths - needs to be exported in page component if it's a dynamic page and we're using getStaticProps.\n// helps make sure we only pregenerate pages for id's that exist. Entering in a path that doesn't exist throws an error\nexport async function getStaticPaths() {\n\t// we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\tconst client = await MongoClient.connect(\n\t\t\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\"\n\t);\n\n\tconst db = client.db();\n\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\t// modify find() to only spit out iD's - first arg: filter criteria where empty means no filter criteria\n\t// second arg: define which fields to extract for each document.\n\t// assigning value of 1 means only fetch this items and not any of the others\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n\tclient.close();\n\n\treturn {\n\t\t// fallback - lets next if your paths contains all supported params of just some of them.\n\t\t// false - paths: contains all meetupId values.\n\t\t// true - next tries to create a new path dynamically based on the request.\n\t\tfallback: false,\n\t\t// paths object defines what paths should be pregenerated using the page ID param\n\t\tpaths: meetups.map((meetup) => ({\n\t\t\tparams: { meetupId: meetup._id.toString() },\n\t\t})),\n\t};\n}\n\n// cant use react hooks in this function\nexport async function getStaticProps(context) {\n\t// context has params\n\t// grab ID for items in the square bracket folder\n\tconst meetupId = context.params.meetupId;\n\n\t// only shows in terminal since it doesn't run on the browser\n\t// console.log(meetupId);\n\n\t// we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\tconst client = await MongoClient.connect(\n\t\t\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\"\n\t);\n\n\tconst db = client.db();\n\n\tconst meetupsCollection = db.collection(\"meetups\");\n\n\t// we want to access a single meetup.\n\t// object in find() set criteria by which we want to find meetup info by (using id in this case but can use any key)\n\tconst selectedMeetup = await meetupsCollection.findOne({\n\t\t// ensures meetupId is an ObjectId and not a string.\n\t\t_id: new ObjectId(meetupId),\n\t});\n\n\tclient.close();\n\n\treturn {\n\t\tprops: {\n\t\t\t// transform data and convert objectId id back to string\n\t\t\tmeetupData: {\n\t\t\t\tid: selectedMeetup._id.toString(),\n\t\t\t\ttitle: selectedMeetup.title,\n\t\t\t\taddress: selectedMeetup.address,\n\t\t\t\timage: selectedMeetup.image,\n\t\t\t\tdescription: selectedMeetup.description,\n\t\t\t},\n\t\t},\n\t};\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}