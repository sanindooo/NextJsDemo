{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    })]\n  });\n} // getStaticPaths - needs to be exported in page component if it's a dynamic page and we're using getStaticProps.\n// helps make sure we only pregenerate pages for id's that exist. Entering in a path that doesn't exist throws an error\n\n\nexport async function getStaticPaths() {\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // modify find() to only spit out iD's - first arg: filter criteria where empty means no filter criteria\n  // second arg: define which fields to extract for each document.\n  // assigning value of 1 means only fetch this items and not any of the others\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // fallback - lets next if your paths contains all supported params of just some of them.\n    // false - paths: contains all meetupId values.\n    // true - next tries to create a new path dynamically based on the request.\n    fallback: false,\n    // paths object defines what paths should be pregenerated using the page ID param\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} // cant use react hooks in this function\n\nexport async function getStaticProps(context) {\n  // context has params\n  // grab ID for items in the square bracket folder\n  const meetupId = context.params.meetupId; // only shows in terminal since it doesn't run on the browser\n  // console.log(meetupId);\n  // we don't need to use fetch because it's redundant. Instead we can directly connect to the DB\n\n  const client = await MongoClient.connect(\"mongodb+srv://sanindo:hansa@cluster0.h26hfvf.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // we want to access a single meetup.\n  // object in find() set criteria by which we want to find meetup info by (using id in this case but can use any key)\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    // ensures meetupId is an ObjectId and not a string.\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      // transform data and convert objectId id back to string\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}